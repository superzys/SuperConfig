<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6" />
  </startup>

  <appSettings>
    <add key="[LUA]template_data" value="local data = {}
data.name = [[[DATA_TABLE_NAME]]]
-- 字段名
data.keys = {
[DATA_KEYS]
}
for i,k in ipairs(data.keys) do
	data.keys[k] = i
end
-- 原始列对应导出列
data.cols = {}
[DATA_COLS]
-- 完整id列表
data.ids = {[DATA_IDS]}
-- 分组数据
data.groups = {}
[DECLARA_GROUPS]
[DATA_GROUPS]
-- 分组数据数量
data.groupscount = {}
[DATA_GROUPS_COUNT]
-- 数据内容
-- [EXCEL_FILES]
data.lines = {}
[DATA_LINES]

return data"/>

    <add key="[LUA]template_title" value="local sheet = {}
formulasheet.[SHEET_NAME] = sheet
sheet.name = [[[SHEET_NAME]]]
sheet.cellvalue = {}
sheet.cellformula = {}
sheet.cellabout = {}
sheet.totalrow = [USEFUL_ROW_COUNT]
for i = 1,sheet.totalrow do
	sheet.cellvalue[i] = {}
	sheet.cellformula[i] = {}
	sheet.cellabout[i] = {}
end"/>
    <add key="[LUA]template_input" value="sheet.input = {
[CONTENT]
}"/>
    <add key="[LUA]template_output" value="sheet.output = {
[CONTENT]
}"/>
    <add key="[LUA]template_value" value="sheet.cellvalue[[ROW]][[COL]] = [VALUE]"/>
    <add key="[LUA]template_func" value="sheet.cellformula[[ROW]][[COL]] = function(ins) return [CONTENT] end"/>
    <add key="[LUA]template_about" value="sheet.cellabout[[ROW]][[COL]] = {[CONTENT]}"/>

    <add key="[LUA]template_cell" value="ins:get([ROW],[COL])"/>
    <add key="[GO]template_cell" value="ins.get([ROW] * 1000 + [COL])"/>
	<add key="[CS]template_cell" value="ins.get([ROW] * 1000 + [COL])"/>
	<add key="[TS]template_cell" value="ins.get([ROW] * 1000 + [COL])"/>

    <add key="[LUA]func_code_IF" value="((ARGS[0]>0) and ARGS[1] or ARGS[2])"/>
    <add key="[LUA]func_code_SUM" value="(ARGS[0]@ + ARGSX@)"/>
    <add key="[LUA]func_code_POWER" value="math.pow(ARGS[0], ARGS[1])"/>
    <add key="[LUA]func_code_MOD" value="math.mod(ARGS[0], ARGS[1])"/>
    <add key="[LUA]func_code_VLOOKUP" value="formulasheet.vlookup(ARGS[0], [[ARGS[1]]], ARGS[2])"/>
    <add key="[LUA]func_code_FACT" value="formulasheet.fact(ARGS[0])"/>
    <add key="[LUA]func_code_ROUND" value="formulasheet.round(ARGS[0], ARGS[1])"/>
    <add key="[LUA]func_code_ROUNDDOWN" value="formulasheet.rounddown(ARGS[0], ARGS[1])"/>
    <add key="[LUA]func_code_ROUNDUP" value="formulasheet.roundup(ARGS[0], ARGS[1])"/>
    <add key="[LUA]func_code_MAX" value="math.max(ARGS[0]@, ARGSX@)"/>
    <add key="[LUA]func_code_MIN" value="math.min(ARGS[0]@, ARGSX@)"/>
    <add key="[LUA]func_code_SUMPRODUCTSEARCH" value="datasheet.get('[PARAM1]'):get(ARGS[0]).[PARAM2]"/>
    <add key="[LUA]func_code_AND" value="formulasheet.and(ARGS[0]@, ARGSX@)"/>
    <add key="[LUA]func_code_OR" value="formulasheet.or(ARGS[0]@, ARGSX@)"/>

    <add key="[GO]func_code_IF" value="ins.excelIf(ARGS[0], ARGS[1], ARGS[2])"/>
    <add key="[GO]func_code_SUM" value="(ARGS[0]@ + ARGSX@)"/>
    <add key="[GO]func_code_POWER" value="ins.excelPow(ARGS[0], ARGS[1])"/>
    <add key="[GO]func_code_MOD" value="ins.excelMod(ARGS[0], ARGS[1])"/>
    <add key="[GO]func_code_VLOOKUP" value="data_ARGS[1]_vlookup_ARGS[2](ARGS[0])"/>
    <add key="[GO]func_code_FACT" value="ins.excelFact(ARGS[0])"/>
    <add key="[GO]func_code_ROUND" value="ins.excelRound(ARGS[0], ARGS[1])"/>
    <add key="[GO]func_code_ROUNDDOWN" value="ins.excelRoundDown(ARGS[0], ARGS[1])"/>
    <add key="[GO]func_code_ROUNDUP" value="ins.excelRoundUp(ARGS[0], ARGS[1])"/>
    <add key="[GO]func_code_MAX" value="ins.excelMax(ARGS[0]@, ARGSX@)"/>
    <add key="[GO]func_code_MIN" value="ins.excelMin(ARGS[0]@, ARGSX@)"/>
    <add key="[GO]func_code_SUMPRODUCTSEARCH" value="Get[PARAM1]Table().Get(int32(ARGS[0])).[PARAM2]"/>
    <add key="[GO]func_code_AND" value="ins.excelAnd(ARGS[0]@, ARGSX@)"/>
    <add key="[GO]func_code_OR" value="ins.excelOr(ARGS[0]@, ARGSX@)"/>

	<add key="[CS]func_code_IF" value="ins.excelIf(ARGS[0], ARGS[1], ARGS[2])"/>
    <add key="[CS]func_code_SUM" value="(ARGS[0]@ + ARGSX@)"/>
    <add key="[CS]func_code_POWER" value="ins.excelPow(ARGS[0], ARGS[1])"/>
    <add key="[CS]func_code_MOD" value="ins.excelMod(ARGS[0], ARGS[1])"/>
    <add key="[CS]func_code_VLOOKUP" value="data_ARGS[1]_vlookup_ARGS[2](ARGS[0])"/>
    <add key="[CS]func_code_FACT" value="ins.excelFact(ARGS[0])"/>
    <add key="[CS]func_code_ROUND" value="ins.excelRound(ARGS[0], ARGS[1])"/>
    <add key="[CS]func_code_ROUNDDOWN" value="ins.excelRoundDown(ARGS[0], ARGS[1])"/>
    <add key="[CS]func_code_ROUNDUP" value="ins.excelRoundUp(ARGS[0], ARGS[1])"/>
    <add key="[CS]func_code_MAX" value="ins.excelMax(ARGS[0]@, ARGSX@)"/>
    <add key="[CS]func_code_MIN" value="ins.excelMin(ARGS[0]@, ARGSX@)"/>
    <add key="[CS]func_code_AND" value="ins.excelAnd(ARGS[0]@, ARGSX@)"/>
    <add key="[CS]func_code_OR" value="ins.excelOr(ARGS[0]@, ARGSX@)"/>	

    <add key="[TS]func_code_IF" value="ins.excelIf(ARGS[0], ARGS[1], ARGS[2])"/>
    <add key="[TS]func_code_SUM" value="(ARGS[0]@ + ARGSX@)"/>
    <add key="[TS]func_code_POWER" value="ins.excelPow(ARGS[0], ARGS[1])"/>
    <add key="[TS]func_code_MOD" value="ins.excelMod(ARGS[0], ARGS[1])"/>
    <add key="[TS]func_code_VLOOKUP" value="data_ARGS[1]_vlookup_ARGS[2](ARGS[0])"/>
    <add key="[TS]func_code_FACT" value="ins.excelFact(ARGS[0])"/>
    <add key="[TS]func_code_ROUND" value="ins.excelRound(ARGS[0], ARGS[1])"/>
    <add key="[TS]func_code_ROUNDDOWN" value="ins.excelRoundDown(ARGS[0], ARGS[1])"/>
    <add key="[TS]func_code_ROUNDUP" value="ins.excelRoundUp(ARGS[0], ARGS[1])"/>
    <add key="[TS]func_code_MAX" value="ins.excelMax(ARGS[0]@, ARGSX@)"/>
    <add key="[TS]func_code_MIN" value="ins.excelMin(ARGS[0]@, ARGSX@)"/>
    <add key="[TS]func_code_AND" value="ins.excelAnd(ARGS[0]@, ARGSX@)"/>
    <add key="[TS]func_code_OR" value="ins.excelOr(ARGS[0]@, ARGSX@)"/>

    <add key="[LUA]operator_code_+" value="(ARGS[0] + ARGS[1])"/>
    <add key="[LUA]operator_code_-" value="(ARGS[0] - ARGS[1])"/>
    <add key="[LUA]operator_code_*" value="(ARGS[0] * ARGS[1])"/>
    <add key="[LUA]operator_code_/" value="(ARGS[0] / ARGS[1])"/>
    <add key="[LUA]operator_code_^" value="(ARGS[0] ^ ARGS[1])"/>
    <add key="[LUA]operator_code_=" value="(ARGS[0] == ARGS[1] and 1 or 0)"/>
    <add key="[LUA]operator_code_&lt;" value="(ARGS[0] &lt; ARGS[1] and 1 or 0)"/>
    <add key="[LUA]operator_code_&gt;" value="(ARGS[0] &gt; ARGS[1] and 1 or 0)"/>

    <add key="[GO]operator_code_+" value="(float64(ARGS[0]) + float64(ARGS[1]))"/>
    <add key="[GO]operator_code_-" value="(float64(ARGS[0]) - float64(ARGS[1]))"/>
    <add key="[GO]operator_code_*" value="(float64(ARGS[0]) * float64(ARGS[1]))"/>
    <add key="[GO]operator_code_/" value="(float64(ARGS[0]) / float64(ARGS[1]))"/>
    <add key="[GO]operator_code_^" value="ins.excelPow(ARGS[0], ARGS[1])"/>
    <add key="[GO]operator_code_=" value="ins.excelCompare(ARGS[0]==ARGS[1])"/>
    <add key="[GO]operator_code_&lt;" value="ins.excelCompare(ARGS[0]&lt;ARGS[1])"/>
    <add key="[GO]operator_code_&gt;" value="ins.excelCompare(ARGS[0]&gt;ARGS[1])"/>

	<add key="[CS]operator_code_+" value="((float)ARGS[0] + (float)ARGS[1])"/>
    <add key="[CS]operator_code_-" value="((float)ARGS[0] - (float)ARGS[1])"/>
    <add key="[CS]operator_code_*" value="((float)ARGS[0] * (float)ARGS[1])"/>
    <add key="[CS]operator_code_/" value="((float)ARGS[0] / (float)ARGS[1])"/>
    <add key="[CS]operator_code_^" value="ins.excelPow(ARGS[0], ARGS[1])"/>
    <add key="[CS]operator_code_=" value="ins.excelCompare(ARGS[0]==ARGS[1])"/>
    <add key="[CS]operator_code_&lt;" value="ins.excelCompare(ARGS[0]&lt;ARGS[1])"/>
    <add key="[CS]operator_code_&gt;" value="ins.excelCompare(ARGS[0]&gt;ARGS[1])"/>	

    <add key="[TS]operator_code_+" value="(ARGS[0] + ARGS[1])"/>
    <add key="[TS]operator_code_-" value="(ARGS[0] - ARGS[1])"/>
    <add key="[TS]operator_code_*" value="(ARGS[0] * ARGS[1])"/>
    <add key="[TS]operator_code_/" value="(ARGS[0] / ARGS[1])"/>
    <add key="[TS]operator_code_^" value="ins.excelPow(ARGS[0], ARGS[1])"/>
    <add key="[TS]operator_code_=" value="ins.excelCompare(ARGS[0]==ARGS[1])"/>
    <add key="[TS]operator_code_&lt;" value="ins.excelCompare(ARGS[0]&lt;ARGS[1])"/>
    <add key="[TS]operator_code_&gt;" value="ins.excelCompare(ARGS[0]&gt;ARGS[1])"/>

    <add key="excelFunctionList" value="ABS
ACCRINT
ACCRINTM
ACOS
ACOSH
ADDRESS
AMORDEGRC
AMORLINC
AND
AREAS
ASC
ASIN
ASINH
ATAN
ATAN2
ATANH
AVEDEV
AVERAGE
AVERAGEA
AVERAGEIF
AVERAGEIFS
BAHTTEXT
BESSELI
BESSELJ
BESSELK
BESSELY
BETADIST
BETAINV
BIN2DEC
BIN2HEX
BIN2OCT
BINOMDIST
CALL
CEILING
CELL
CHAR
CHIDIST
CHIINV
CHITEST
CLEAN
CODE
COLUMN
COLUMNS
COMBIN
COMPLEX
CONCATENATE
CONFIDENCE
CONVERT
CORREL
COS
COSH
COUNT
COUNTA
COUNTBLANK
COUNTIF
COUNTIFS
COUPDAYBS
COUPDAYS
COUPDAYSNC
COUPNCD
COUPNUM
COUPPCD
COVAR
CRITBINOM
CUBEKPIMEMBER
CUBEMEMBER
CUBEMEMBERPROPERTY
CUBERANKEDMEMBER
CUBESET
CUBESETCOUNT
CUBEVALUE
CUMIPMT
CUMPRINC
DATE
DATEVALUE
DAVERAGE
DAY
DAYS360
DB
DCOUNT
DCOUNTA
DDB
DEC2BIN
DEC2HEX
DEC2OCT
DEGREES
DELTA
DEVSQ
DGET
DISC
DMAX
DMIN
DOLLAR
DOLLARDE
DOLLARFR
DPRODUCT
DSTDEV
DSTDEVP
DSUM
DURATION
DVAR
DVARP
EDATEEFFECT
EOMONTH
ERF
ERFC
ERROR.TYPE
EUROCONVERT
EVEN
EXACT
EXP
EXPONDIST
FACT
FACTDOUBLE
FALSE
FDIST
FIND
FINV
FISHER
FISHERINV
FIXED
FLOOR
FORECAST
FREQUENCY
FTEST
FV
FVSCHEDULE
GAMMADIST
GAMMAINV
GAMMALN
GCD
GEOMEAN
GESTEP
GETPIVOTDATA
GROWTH
HARMEAN
HEX2BIN
HEX2DEC
HEX2OCT
HLOOKUP
HOUR
HYPERLINK
HYPGEOMDIST
ISBLANK
IFERROR
IMABS
IMAGINARY
IMARGUMENT
IMCONJUGATE
IMCOS
IMDIV
IMEXP
IMLN
IMLOG10
IMLOG2
IMPOWER
IMPRODUCT
IMREAL
IMSIN
IMSQRT
IMSUB
IMSUM
INFO
INT
INTERCEPT
INTRATE
IPMT
IRR
IS
ISB
ISERROR
ISNA
ISNUMBER
ISPMT
JIS
KURT
LARGE
LCM
LEFT
LEFTB
LEN
LENB
LINEST
LN
LOG
LOG10
LOGEST
LOGINV
LOGNORMDIST
LOOKUP
LOWER
MATCH
MAX
MAXA
MDETERM
MDURATION
MEDIAN
MID
MIDB
MIN
MINA
MINUTE
MINVERSE
MIRR
MMULT
MOD
MODE
MONTH
MROUND
MULTINOMIAL
N
NA
NEGBINOMDIST
NETWORKDAYS
NOMINAL
NORMDIST
NORMINV
NORMSDIST
NORMSINV
NOT
NOW
NPER
NPV
OCT2BIN
OCT2DEC
OCT2HEX
ODD
ODDFPRICE
ODDFYIELD
ODDLPRICE
ODDLYIELD
OR
PEARSON
PERCENTILE
PERCENTRANK
PERMUT
PHONETIC
PI
PMT
POISSON
POWER
PPMT
PRICE
PRICEDISC
PRICEMAT
PROB
PRODUCT
PROPER
PV
QUARTILE
QUOTIENT
RADIANS
RAND
RANDBETWEEN
RANK
RATE
RECEIVED
REGISTER.ID
REPLACE
REPLACEB
REPT
RIGHT
RIGHTB
ROMAN
ROUND
ROUNDDOWN
ROUNDUP
ROW
ROWS
RSQ
RTD
SEARCH
SEARCHB
SECOND
SERIESSUM
SIGN
SIN
SINH
SKEW
SLN
SLOPE
SMALL
SQL.REQUEST
SQRT
SQRTPI
STANDARDIZE
STDEV
STDEVA
STDEVP
STDEVPA
STEYX
SUBSTITUTE
SUBTOTAL
SUM
SUMIF
SUMIFS
SUMPRODUCT
SUMSQ
SUMX2MY2
SUMX2PY2
SUMXMY2
SYD
T
TAN
TANH
TBILLEQ
TBILLPRICE
TBILLYIELD
TDIST
TEXT
TIME
TIMEVALUE
TINV
TODAY
TRANSPOSE
TREND
TRIM
TRIMMEAN
TRUE
TRUNC
TTEST
TYPE
UPPER
VALUE
VAR
VARA
VARP
VARPA
VDB
VLOOKUP
WEEKDAY
WEEKNUM
WEIBULL
WORKDAY
XIRR
XNPV
YEAR
YEARFRAC
YIELD
YIELDDISC
YIELDMAT
ZTEST"/>
  </appSettings>
</configuration>